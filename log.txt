
Poem
  is expected to validate that :title cannot be empty/falsy
  is expected to validate that :stanzas cannot be empty/falsy
  is expected to allow :complete to be ‹true› or ‹false›
  is expected to belong to author class_name => User required: true

User
  is expected to validate that :username cannot be empty/falsy
  is expected to validate that :username is case-sensitively unique
  is expected to validate that :session_token is case-sensitively unique
  is expected to validate that :password_digest cannot be empty/falsy
  is expected to validate that the length of :password is at least 6
  is expected to have many poems
  password encryption
    does not save passwords to the database
    saves passwords properly
      encrypts the password using BCrypt
      properly sets the password reader
  session token
    assigns a session_token if one is not given
    uses `#reset_session_token!` to reset a session token on a user
  finds users by credentials
    with a valid username and password
      returns the proper user
    with an invalid username and password
      returns nil

ApplicationController
  CSRF protection
    protects from forgery

Poems
  GET /poems (#index)
    when logged in
      renders the index page displaying "All Poems"
    when logged out
      redirects to the login page
  GET /poems/new (#new)
    when logged in
      renders the "Create New Poem" form
    when logged out
      redirects to the login page
  POST /poems (#create)
    when logged in
      with invalid params
        appropriately stores error messages for display and returns to the "Create New Poem" form (FAILED - 1)
      with valid params
        creates the poem and redirects to the poem's index page (FAILED - 2)
    when logged out
      redirects to the login page
  GET /poems/:id/edit (#edit)
    when logged in
      renders the "Edit Poem" page (even if logged-in user is not the author) (FAILED - 3)
    when logged out
      redirects to the login page
  PATCH /poems/:id (#update)
    when logged in as a different user
      does not allow users to update another user's poems
      returns to the "Edit Poem" form and appropriately stores error message "Something went wrong!" for display (FAILED - 4)
    when logged in as the poem's owner
      updates the poem and redirects to the poem index page (FAILED - 5)
    when logged out
      redirects to the login page

Session
  GET /session/new (#new)
    renders the "Sign In" form
  POST /session (#create)
    with non-existent user
      returns to "Sign In" form and appropriately stores "Invalid username or password" error message for display
    with bad password
      returns to "Sign In" form and appropriately stores "Invalid username or password" error message for display
    with valid credentials
      redirects to the poem index on success
      logs in the user
  DELETE /session (#destroy)
    when logged in
      logs out the current user
    when logged out
      redirects to the login page

Users
  GET /users/new (#new)
    renders the "Sign Up" form
  POST /users (#create)
    with blank username
      returns to the "Sign Up" page and appropriately stores "Username can't be blank" error message for display
    with too-short password
      returns to the "Sign Up" page and appropriately stores "Password is too short (minimum is 6 characters)" for display
    with valid params
      redirects to the poem index
      logs in the user

Auth
  Sign Up (hint: make sure your capitalization is exact!)
    has a "Sign Up" page
    takes a "Username" and "Password"
    on a successful save
      logs the user in and redirects to the poem index
    on a failed save
      renders errors to the user
      prefills a user's information from a failed save
  Sign Out
    has a "Sign Out" button
    logs a user out on click and redirects to the sign-in page (FAILED - 6)
  Sign In
    has a "Sign In" page
    takes a "Username" and "Password"
    on a successful save
      logs in a user and takes them to the poem index
    on a failed save
      renders errors to the user
      prefills a user's information from a failed save

Poems
  Creating a poem (hint: make sure your capitalization is exact!)
    when logged in
      has a form to "Create New Poem"
      takes a "Title" and "Stanzas"
      has a radio button that allows a user to choose "true" if a poem is complete
      has a radio button that allows a user to choose "false" if a poem is incomplete
      on a successful save
        redirects to the poem index page (FAILED - 7)
      on a failed save
        renders errors to the user
        prefills previously input information and still allows for a successful save (FAILED - 8)
  Editing an existing poem (hint: make sure your capitalization is exact!)
    when logged in
      has an "Edit Poem" form to edit an existing poem (FAILED - 9)
      takes a "Title" and "Stanzas" (FAILED - 10)
    on a successful update
      redirects to the poem index page and updates the poem's information (FAILED - 11)
    on a failed update
      returns to the edit form displaying "Something went wrong!" (FAILED - 12)
      prefills information from a failed update and still allows for a successful update (FAILED - 13)

poems/index
  has a message indicating the user is viewing "All Poems"
  displays a link to create a new poem (FAILED - 14)
  displays all the poem titles
  displays the word 'Done' if the poem is complete
  does not display the word 'Done' if the poem is incomplete
  displays all the poem stanzas
  displays a link that allows a user to edit a poem (FAILED - 15)

Failures:

  1) Poems POST /poems (#create) when logged in with invalid params appropriately stores error messages for display and returns to the "Create New Poem" form
     Failure/Error: expect(flash.now[:errors]).to eq(["Stanzas can't be blank"])

       expected: ["Stanzas can't be blank"]
            got: ["Stanzas can't be blank", "Author must exist"]

       (compared using ==)
     # ./spec/requests/poems_spec.rb:65:in `block (5 levels) in <top (required)>'

  2) Poems POST /poems (#create) when logged in with valid params creates the poem and redirects to the poem's index page
     Failure/Error: expect(response).to redirect_to(poems_url)
       Expected response to be a <3XX: redirect>, but was a <200: OK>
     # ./spec/requests/poems_spec.rb:77:in `block (5 levels) in <top (required)>'

  3) Poems GET /poems/:id/edit (#edit) when logged in renders the "Edit Poem" page (even if logged-in user is not the author)
     Failure/Error: render :edit

     ActionView::MissingTemplate:
       Missing template poems/edit, application/edit with {:locale=>[:en], :formats=>[:html], :variants=>[], :handlers=>[:raw, :erb, :html, :builder, :ruby]}.

       Searched in:
         * "/Users/steve/Downloads/Assessments/SabrinaDesmond/sabrina_desmond_assessment-for-ch-rails-2-version-a-rails2a-main/app/views"

       Did you mean?  poems/new
                      poems/index
                      users/new
                      layouts/application
                      sessions/new
     # ./app/controllers/poems_controller.rb:28:in `edit'
     # ./spec/requests/poems_spec.rb:103:in `block (4 levels) in <top (required)>'

  4) Poems PATCH /poems/:id (#update) when logged in as a different user returns to the "Edit Poem" form and appropriately stores error message "Something went wrong!" for display
     Failure/Error: expect(response.body).to include('Edit Poem')
       expected "<html><body>You are being <a href=\"http://www.example.com/poems\">redirected</a>.</body></html>" to include "Edit Poem"
     # ./spec/requests/poems_spec.rb:134:in `block (4 levels) in <top (required)>'

  5) Poems PATCH /poems/:id (#update) when logged in as the poem's owner updates the poem and redirects to the poem index page
     Failure/Error: expect(Poem.exists?(title: 'Updated Poem Title!')).to be true

       expected true
            got false
     # ./spec/requests/poems_spec.rb:146:in `block (4 levels) in <top (required)>'

  6) Auth Sign Out logs a user out on click and redirects to the sign-in page
     Failure/Error: expect(current_path).to eq(new_session_path)

       expected: "/session/new"
            got: "/poems"

       (compared using ==)
     # ./spec/system/auth_spec.rb:57:in `block (3 levels) in <top (required)>'

  7) Poems Creating a poem (hint: make sure your capitalization is exact!) when logged in on a successful save redirects to the poem index page
     Failure/Error: expect(page).to have_content 'Sunshine'
       expected to find text "Sunshine" in "Sign Out Author must exist Create New Poem\nTitle Stanzas Complete True False Create Poem"
     # ./spec/system/poems_spec.rb:50:in `block (5 levels) in <top (required)>'

  8) Poems Creating a poem (hint: make sure your capitalization is exact!) when logged in on a failed save prefills previously input information and still allows for a successful save
     Failure/Error: expect(page).to have_content 'Sunshine'
       expected to find text "Sunshine" in "Sign Out Author must exist Create New Poem\nTitle Stanzas Complete True False Create Poem"
     # ./spec/system/poems_spec.rb:70:in `block (5 levels) in <top (required)>'

  9) Poems Editing an existing poem (hint: make sure your capitalization is exact!) when logged in has an "Edit Poem" form to edit an existing poem
     Failure/Error: click_link 'Edit Poem'

     Capybara::ElementNotFound:
       Unable to find link "Edit Poem"
     # ./spec/system/poems_spec.rb:81:in `block (4 levels) in <top (required)>'

  10) Poems Editing an existing poem (hint: make sure your capitalization is exact!) when logged in takes a "Title" and "Stanzas"
      Failure/Error: click_link 'Edit Poem'

      Capybara::ElementNotFound:
        Unable to find link "Edit Poem"
      # ./spec/system/poems_spec.rb:81:in `block (4 levels) in <top (required)>'

  11) Poems Editing an existing poem (hint: make sure your capitalization is exact!) on a successful update redirects to the poem index page and updates the poem's information
      Failure/Error: click_link 'Edit Poem'

      Capybara::ElementNotFound:
        Unable to find link "Edit Poem"
      # ./spec/system/poems_spec.rb:98:in `block (4 levels) in <top (required)>'

  12) Poems Editing an existing poem (hint: make sure your capitalization is exact!) on a failed update returns to the edit form displaying "Something went wrong!"
      Failure/Error: click_link 'Edit Poem'

      Capybara::ElementNotFound:
        Unable to find link "Edit Poem"
      # ./spec/system/poems_spec.rb:113:in `block (4 levels) in <top (required)>'

  13) Poems Editing an existing poem (hint: make sure your capitalization is exact!) on a failed update prefills information from a failed update and still allows for a successful update
      Failure/Error: click_link 'Edit Poem'

      Capybara::ElementNotFound:
        Unable to find link "Edit Poem"
      # ./spec/system/poems_spec.rb:113:in `block (4 levels) in <top (required)>'

  14) poems/index displays a link to create a new poem
      Failure/Error: expect(rendered).to have_link 'Create New Poem', href: new_poem_url
        expected to find link "Create New Poem" with href "http://test.host/poems/new" but there were no matches
      # ./spec/views/poems/index.html.erb_spec.rb:28:in `block (2 levels) in <top (required)>'

  15) poems/index displays a link that allows a user to edit a poem
      Failure/Error: expect(rendered).to have_link 'Edit Poem', href: edit_poem_url(jasmine_poem)
        expected to find link "Edit Poem" with href "http://test.host/poems/15/edit" but there were no matches
      # ./spec/views/poems/index.html.erb_spec.rb:70:in `block (2 levels) in <top (required)>'

Finished in 23.83 seconds (files took 3.23 seconds to load)
74 examples, 15 failures

Failed examples:

rspec ./spec/requests/poems_spec.rb:59 # Poems POST /poems (#create) when logged in with invalid params appropriately stores error messages for display and returns to the "Create New Poem" form
rspec ./spec/requests/poems_spec.rb:70 # Poems POST /poems (#create) when logged in with valid params creates the poem and redirects to the poem's index page
rspec ./spec/requests/poems_spec.rb:102 # Poems GET /poems/:id/edit (#edit) when logged in renders the "Edit Poem" page (even if logged-in user is not the author)
rspec ./spec/requests/poems_spec.rb:132 # Poems PATCH /poems/:id (#update) when logged in as a different user returns to the "Edit Poem" form and appropriately stores error message "Something went wrong!" for display
rspec ./spec/requests/poems_spec.rb:144 # Poems PATCH /poems/:id (#update) when logged in as the poem's owner updates the poem and redirects to the poem index page
rspec ./spec/system/auth_spec.rb:52 # Auth Sign Out logs a user out on click and redirects to the sign-in page
rspec ./spec/system/poems_spec.rb:48 # Poems Creating a poem (hint: make sure your capitalization is exact!) when logged in on a successful save redirects to the poem index page
rspec ./spec/system/poems_spec.rb:65 # Poems Creating a poem (hint: make sure your capitalization is exact!) when logged in on a failed save prefills previously input information and still allows for a successful save
rspec ./spec/system/poems_spec.rb:84 # Poems Editing an existing poem (hint: make sure your capitalization is exact!) when logged in has an "Edit Poem" form to edit an existing poem
rspec ./spec/system/poems_spec.rb:88 # Poems Editing an existing poem (hint: make sure your capitalization is exact!) when logged in takes a "Title" and "Stanzas"
rspec ./spec/system/poems_spec.rb:103 # Poems Editing an existing poem (hint: make sure your capitalization is exact!) on a successful update redirects to the poem index page and updates the poem's information
rspec ./spec/system/poems_spec.rb:119 # Poems Editing an existing poem (hint: make sure your capitalization is exact!) on a failed update returns to the edit form displaying "Something went wrong!"
rspec ./spec/system/poems_spec.rb:123 # Poems Editing an existing poem (hint: make sure your capitalization is exact!) on a failed update prefills information from a failed update and still allows for a successful update
rspec ./spec/views/poems/index.html.erb_spec.rb:23 # poems/index displays a link to create a new poem
rspec ./spec/views/poems/index.html.erb_spec.rb:65 # poems/index displays a link that allows a user to edit a poem

